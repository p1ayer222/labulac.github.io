<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ダイズの部屋</title>
    <url>/d6414c26.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="07b5880025fb3a4453e46f6645977b044fc477db132a342d9bfbb19ae8e034b9"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 请输入密码：</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>docker</tag>
        <tag>secret</tag>
      </tags>
  </entry>
  <entry>
    <title>pve lxc docker与tun配置</title>
    <url>/10b14d07.html</url>
    <content><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lxc.apparmor.profile: unconfined</span><br><span class="line">lxc.cgroup.devices.allow: a</span><br><span class="line">lxc.cap.drop: </span><br><span class="line">lxc.cgroup2.devices.allow: c 10:200 rwm</span><br><span class="line">lxc.hook.autodev: sh -c <span class="string">"modprobe tun; cd <span class="variable">$&#123;LXC_ROOTFS_MOUNT&#125;</span>/dev; mkdir net; mknod net/tun c 10 200; chmod 0666 net/tun"</span></span><br></pre></td></tr></table></figure><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>pve</tag>
        <tag>lxc</tag>
      </tags>
  </entry>
  <entry>
    <title>headscale搭建记录</title>
    <url>/31be5f55.html</url>
    <content><![CDATA[<h3 id="docker-headscale"><a href="#docker-headscale" class="headerlink" title="docker-headscale"></a>docker-headscale</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/docker/headscale/config &amp;&amp; \</span><br><span class="line">mkdir -p /home/docker/headscale/data &amp;&amp; \</span><br><span class="line">touch /home/docker/headscale/data/db.sqlite &amp;&amp; \</span><br><span class="line">wget https://github.com/juanfont/headscale/raw/v0.22.3/config-example.yaml -O /home/docker/headscale/config/config.yaml</span><br></pre></td></tr></table></figure><a id="more"></a><p>配置文件备份</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"># headscale will look for a configuration file named &#96;config.yaml&#96; (or &#96;config.json&#96;) in the following order:</span><br><span class="line">#</span><br><span class="line"># - &#96;&#x2F;etc&#x2F;headscale&#96;</span><br><span class="line"># - &#96;~&#x2F;.headscale&#96;</span><br><span class="line"># - current working directory</span><br><span class="line"></span><br><span class="line"># The url clients will connect to.</span><br><span class="line"># Typically this will be a domain like:</span><br><span class="line">#</span><br><span class="line"># https:&#x2F;&#x2F;myheadscale.example.com:443</span><br><span class="line">#</span><br><span class="line">server_url: https:&#x2F;&#x2F;eu.org:30443</span><br><span class="line"></span><br><span class="line"># Address to listen to &#x2F; bind to on the server</span><br><span class="line">#</span><br><span class="line"># For production:</span><br><span class="line">listen_addr: 0.0.0.0:8080</span><br><span class="line"></span><br><span class="line"># Address to listen to &#x2F;metrics, you may want</span><br><span class="line"># to keep this endpoint private to your internal</span><br><span class="line"># network</span><br><span class="line">#</span><br><span class="line">metrics_listen_addr: 0.0.0.0:9090</span><br><span class="line"></span><br><span class="line"># Address to listen for gRPC.</span><br><span class="line"># gRPC is used for controlling a headscale server</span><br><span class="line"># remotely with the CLI</span><br><span class="line"># Note: Remote access _only_ works if you have</span><br><span class="line"># valid certificates.</span><br><span class="line">#</span><br><span class="line"># For production:</span><br><span class="line"># grpc_listen_addr: 0.0.0.0:50443</span><br><span class="line">grpc_listen_addr: 0.0.0.0:50443</span><br><span class="line"></span><br><span class="line"># Allow the gRPC admin interface to run in INSECURE</span><br><span class="line"># mode. This is not recommended as the traffic will</span><br><span class="line"># be unencrypted. Only enable if you know what you</span><br><span class="line"># are doing.</span><br><span class="line">grpc_allow_insecure: false</span><br><span class="line"></span><br><span class="line"># Private key used to encrypt the traffic between headscale</span><br><span class="line"># and Tailscale clients.</span><br><span class="line"># The private key file will be autogenerated if it&#39;s missing.</span><br><span class="line">#</span><br><span class="line">private_key_path: &#x2F;var&#x2F;lib&#x2F;headscale&#x2F;private.key</span><br><span class="line"></span><br><span class="line"># The Noise section includes specific configuration for the</span><br><span class="line"># TS2021 Noise protocol</span><br><span class="line">noise:</span><br><span class="line">  # The Noise private key is used to encrypt the</span><br><span class="line">  # traffic between headscale and Tailscale clients when</span><br><span class="line">  # using the new Noise-based protocol. It must be different</span><br><span class="line">  # from the legacy private key.</span><br><span class="line">  private_key_path: &#x2F;var&#x2F;lib&#x2F;headscale&#x2F;noise_private.key</span><br><span class="line"></span><br><span class="line"># List of IP prefixes to allocate tailaddresses from.</span><br><span class="line"># Each prefix consists of either an IPv4 or IPv6 address,</span><br><span class="line"># and the associated prefix length, delimited by a slash.</span><br><span class="line"># It must be within IP ranges supported by the Tailscale</span><br><span class="line"># client - i.e., subnets of 100.64.0.0&#x2F;10 and fd7a:115c:a1e0::&#x2F;48.</span><br><span class="line"># See below:</span><br><span class="line"># IPv6: https:&#x2F;&#x2F;github.com&#x2F;tailscale&#x2F;tailscale&#x2F;blob&#x2F;22ebb25e833264f58d7c3f534a8b166894a89536&#x2F;net&#x2F;tsaddr&#x2F;tsaddr.go#LL81C52-L81C71</span><br><span class="line"># IPv4: https:&#x2F;&#x2F;github.com&#x2F;tailscale&#x2F;tailscale&#x2F;blob&#x2F;22ebb25e833264f58d7c3f534a8b166894a89536&#x2F;net&#x2F;tsaddr&#x2F;tsaddr.go#L33</span><br><span class="line"># Any other range is NOT supported, and it will cause unexpected issues.</span><br><span class="line">ip_prefixes:</span><br><span class="line">  - fd7a:115c:a1e0::&#x2F;48</span><br><span class="line">  - 100.64.0.0&#x2F;10</span><br><span class="line"></span><br><span class="line"># DERP is a relay system that Tailscale uses when a direct</span><br><span class="line"># connection cannot be established.</span><br><span class="line"># https:&#x2F;&#x2F;tailscale.com&#x2F;blog&#x2F;how-tailscale-works&#x2F;#encrypted-tcp-relays-derp</span><br><span class="line">#</span><br><span class="line"># headscale needs a list of DERP servers that can be presented</span><br><span class="line"># to the clients.</span><br><span class="line">derp:</span><br><span class="line">  server:</span><br><span class="line">    # If enabled, runs the embedded DERP server and merges it into the rest of the DERP config</span><br><span class="line">    # The Headscale server_url defined above MUST be using https, DERP requires TLS to be in place</span><br><span class="line">    enabled: false</span><br><span class="line"></span><br><span class="line">    # Region ID to use for the embedded DERP server.</span><br><span class="line">    # The local DERP prevails if the region ID collides with other region ID coming from</span><br><span class="line">    # the regular DERP config.</span><br><span class="line">    region_id: 999</span><br><span class="line"></span><br><span class="line">    # Region code and name are displayed in the Tailscale UI to identify a DERP region</span><br><span class="line">    region_code: &quot;headscale&quot;</span><br><span class="line">    region_name: &quot;Headscale Embedded DERP&quot;</span><br><span class="line"></span><br><span class="line">    # Listens over UDP at the configured address for STUN connections - to help with NAT traversal.</span><br><span class="line">    # When the embedded DERP server is enabled stun_listen_addr MUST be defined.</span><br><span class="line">    #</span><br><span class="line">    # For more details on how this works, check this great article: https:&#x2F;&#x2F;tailscale.com&#x2F;blog&#x2F;how-tailscale-works&#x2F;</span><br><span class="line">    stun_listen_addr: &quot;0.0.0.0:3478&quot;</span><br><span class="line"></span><br><span class="line">  # List of externally available DERP maps encoded in JSON</span><br><span class="line">  urls:</span><br><span class="line">    - https:&#x2F;&#x2F;controlplane.tailscale.com&#x2F;derpmap&#x2F;default</span><br><span class="line"></span><br><span class="line">  # Locally available DERP map files encoded in YAML</span><br><span class="line">  #</span><br><span class="line">  # This option is mostly interesting for people hosting</span><br><span class="line">  # their own DERP servers:</span><br><span class="line">  # https:&#x2F;&#x2F;tailscale.com&#x2F;kb&#x2F;1118&#x2F;custom-derp-servers&#x2F;</span><br><span class="line">  #</span><br><span class="line">  # paths:</span><br><span class="line">  #   - &#x2F;etc&#x2F;headscale&#x2F;derp-example.yaml</span><br><span class="line">  paths: []</span><br><span class="line"></span><br><span class="line">  # If enabled, a worker will be set up to periodically</span><br><span class="line">  # refresh the given sources and update the derpmap</span><br><span class="line">  # will be set up.</span><br><span class="line">  auto_update_enabled: true</span><br><span class="line"></span><br><span class="line">  # How often should we check for DERP updates?</span><br><span class="line">  update_frequency: 24h</span><br><span class="line"></span><br><span class="line"># Disables the automatic check for headscale updates on startup</span><br><span class="line">disable_check_updates: false</span><br><span class="line"></span><br><span class="line"># Time before an inactive ephemeral node is deleted?</span><br><span class="line">ephemeral_node_inactivity_timeout: 30m</span><br><span class="line"></span><br><span class="line"># Period to check for node updates within the tailnet. A value too low will severely affect</span><br><span class="line"># CPU consumption of Headscale. A value too high (over 60s) will cause problems</span><br><span class="line"># for the nodes, as they won&#39;t get updates or keep alive messages frequently enough.</span><br><span class="line"># In case of doubts, do not touch the default 10s.</span><br><span class="line">node_update_check_interval: 10s</span><br><span class="line"></span><br><span class="line"># SQLite config</span><br><span class="line">db_type: sqlite3</span><br><span class="line"></span><br><span class="line"># For production:</span><br><span class="line">db_path: &#x2F;var&#x2F;lib&#x2F;headscale&#x2F;db.sqlite</span><br><span class="line"></span><br><span class="line"># # Postgres config</span><br><span class="line"># If using a Unix socket to connect to Postgres, set the socket path in the &#39;host&#39; field and leave &#39;port&#39; blank.</span><br><span class="line"># db_type: postgres</span><br><span class="line"># db_host: localhost</span><br><span class="line"># db_port: 5432</span><br><span class="line"># db_name: headscale</span><br><span class="line"># db_user: foo</span><br><span class="line"># db_pass: bar</span><br><span class="line"></span><br><span class="line"># If other &#39;sslmode&#39; is required instead of &#39;require(true)&#39; and &#39;disabled(false)&#39;, set the &#39;sslmode&#39; you need</span><br><span class="line"># in the &#39;db_ssl&#39; field. Refers to https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;current&#x2F;libpq-ssl.html Table 34.1.</span><br><span class="line"># db_ssl: false</span><br><span class="line"></span><br><span class="line">### TLS configuration</span><br><span class="line">#</span><br><span class="line">## Let&#39;s encrypt &#x2F; ACME</span><br><span class="line">#</span><br><span class="line"># headscale supports automatically requesting and setting up</span><br><span class="line"># TLS for a domain with Let&#39;s Encrypt.</span><br><span class="line">#</span><br><span class="line"># URL to ACME directory</span><br><span class="line">acme_url: https:&#x2F;&#x2F;acme-v02.api.letsencrypt.org&#x2F;directory</span><br><span class="line"></span><br><span class="line"># Email to register with ACME provider</span><br><span class="line">acme_email: &quot;&quot;</span><br><span class="line"></span><br><span class="line"># Domain name to request a TLS certificate for:</span><br><span class="line">tls_letsencrypt_hostname: &quot;&quot;</span><br><span class="line"></span><br><span class="line"># Path to store certificates and metadata needed by</span><br><span class="line"># letsencrypt</span><br><span class="line"># For production:</span><br><span class="line">tls_letsencrypt_cache_dir: &#x2F;var&#x2F;lib&#x2F;headscale&#x2F;cache</span><br><span class="line"></span><br><span class="line"># Type of ACME challenge to use, currently supported types:</span><br><span class="line"># HTTP-01 or TLS-ALPN-01</span><br><span class="line"># See [docs&#x2F;tls.md](docs&#x2F;tls.md) for more information</span><br><span class="line">tls_letsencrypt_challenge_type: HTTP-01</span><br><span class="line"># When HTTP-01 challenge is chosen, letsencrypt must set up a</span><br><span class="line"># verification endpoint, and it will be listening on:</span><br><span class="line"># :http &#x3D; port 80</span><br><span class="line">tls_letsencrypt_listen: &quot;:http&quot;</span><br><span class="line"></span><br><span class="line">## Use already defined certificates:</span><br><span class="line">tls_cert_path: &quot;&quot;</span><br><span class="line">tls_key_path: &quot;&quot;</span><br><span class="line"></span><br><span class="line">log:</span><br><span class="line">  # Output formatting for logs: text or json</span><br><span class="line">  format: text</span><br><span class="line">  level: info</span><br><span class="line"></span><br><span class="line"># Path to a file containg ACL policies.</span><br><span class="line"># ACLs can be defined as YAML or HUJSON.</span><br><span class="line"># https:&#x2F;&#x2F;tailscale.com&#x2F;kb&#x2F;1018&#x2F;acls&#x2F;</span><br><span class="line">acl_policy_path: &quot;&quot;</span><br><span class="line"></span><br><span class="line">## DNS</span><br><span class="line">#</span><br><span class="line"># headscale supports Tailscale&#39;s DNS configuration and MagicDNS.</span><br><span class="line"># Please have a look to their KB to better understand the concepts:</span><br><span class="line">#</span><br><span class="line"># - https:&#x2F;&#x2F;tailscale.com&#x2F;kb&#x2F;1054&#x2F;dns&#x2F;</span><br><span class="line"># - https:&#x2F;&#x2F;tailscale.com&#x2F;kb&#x2F;1081&#x2F;magicdns&#x2F;</span><br><span class="line"># - https:&#x2F;&#x2F;tailscale.com&#x2F;blog&#x2F;2021-09-private-dns-with-magicdns&#x2F;</span><br><span class="line">#</span><br><span class="line">dns_config:</span><br><span class="line">  # Whether to prefer using Headscale provided DNS or use local.</span><br><span class="line">  override_local_dns: true</span><br><span class="line"></span><br><span class="line">  # List of DNS servers to expose to clients.</span><br><span class="line">  nameservers:</span><br><span class="line">    - 114.114.114.114</span><br><span class="line"></span><br><span class="line">  # NextDNS (see https:&#x2F;&#x2F;tailscale.com&#x2F;kb&#x2F;1218&#x2F;nextdns&#x2F;).</span><br><span class="line">  # &quot;abc123&quot; is example NextDNS ID, replace with yours.</span><br><span class="line">  #</span><br><span class="line">  # With metadata sharing:</span><br><span class="line">  # nameservers:</span><br><span class="line">  #   - https:&#x2F;&#x2F;dns.nextdns.io&#x2F;abc123</span><br><span class="line">  #</span><br><span class="line">  # Without metadata sharing:</span><br><span class="line">  # nameservers:</span><br><span class="line">  #   - 2a07:a8c0::ab:c123</span><br><span class="line">  #   - 2a07:a8c1::ab:c123</span><br><span class="line"></span><br><span class="line">  # Split DNS (see https:&#x2F;&#x2F;tailscale.com&#x2F;kb&#x2F;1054&#x2F;dns&#x2F;),</span><br><span class="line">  # list of search domains and the DNS to query for each one.</span><br><span class="line">  #</span><br><span class="line">  # restricted_nameservers:</span><br><span class="line">  #   foo.bar.com:</span><br><span class="line">  #     - 114.114.114.114</span><br><span class="line">  #   darp.headscale.net:</span><br><span class="line">  #     - 114.114.114.114</span><br><span class="line">  #     - 8.8.8.8</span><br><span class="line"></span><br><span class="line">  # Search domains to inject.</span><br><span class="line">  domains: []</span><br><span class="line"></span><br><span class="line">  # Extra DNS records</span><br><span class="line">  # so far only A-records are supported (on the tailscale side)</span><br><span class="line">  # See https:&#x2F;&#x2F;github.com&#x2F;juanfont&#x2F;headscale&#x2F;blob&#x2F;main&#x2F;docs&#x2F;dns-records.md#Limitations</span><br><span class="line">  # extra_records:</span><br><span class="line">  #   - name: &quot;grafana.myvpn.example.com&quot;</span><br><span class="line">  #     type: &quot;A&quot;</span><br><span class="line">  #     value: &quot;100.64.0.3&quot;</span><br><span class="line">  #</span><br><span class="line">  #   # you can also put it in one line</span><br><span class="line">  #   - &#123; name: &quot;prometheus.myvpn.example.com&quot;, type: &quot;A&quot;, value: &quot;100.64.0.3&quot; &#125;</span><br><span class="line"></span><br><span class="line">  # Whether to use [MagicDNS](https:&#x2F;&#x2F;tailscale.com&#x2F;kb&#x2F;1081&#x2F;magicdns&#x2F;).</span><br><span class="line">  # Only works if there is at least a nameserver defined.</span><br><span class="line">  magic_dns: false</span><br><span class="line"></span><br><span class="line">  # Defines the base domain to create the hostnames for MagicDNS.</span><br><span class="line">  # &#96;base_domain&#96; must be a FQDNs, without the trailing dot.</span><br><span class="line">  # The FQDN of the hosts will be</span><br><span class="line">  # &#96;hostname.user.base_domain&#96; (e.g., _myhost.myuser.example.com_).</span><br><span class="line">  base_domain: eu.org</span><br><span class="line"></span><br><span class="line"># Unix socket used for the CLI to connect without authentication</span><br><span class="line"># Note: for production you will want to set this to something like:</span><br><span class="line">unix_socket: &#x2F;var&#x2F;run&#x2F;headscale&#x2F;headscale.sock</span><br><span class="line">unix_socket_permission: &quot;0770&quot;</span><br><span class="line">#</span><br><span class="line"># headscale supports experimental OpenID connect support,</span><br><span class="line"># it is still being tested and might have some bugs, please</span><br><span class="line"># help us test it.</span><br><span class="line"># OpenID Connect</span><br><span class="line"># oidc:</span><br><span class="line">#   only_start_if_oidc_is_available: true</span><br><span class="line">#   issuer: &quot;https:&#x2F;&#x2F;your-oidc.issuer.com&#x2F;path&quot;</span><br><span class="line">#   client_id: &quot;your-oidc-client-id&quot;</span><br><span class="line">#   client_secret: &quot;your-oidc-client-secret&quot;</span><br><span class="line">#   # Alternatively, set &#96;client_secret_path&#96; to read the secret from the file.</span><br><span class="line">#   # It resolves environment variables, making integration to systemd&#39;s</span><br><span class="line">#   # &#96;LoadCredential&#96; straightforward:</span><br><span class="line">#   client_secret_path: &quot;$&#123;CREDENTIALS_DIRECTORY&#125;&#x2F;oidc_client_secret&quot;</span><br><span class="line">#   # client_secret and client_secret_path are mutually exclusive.</span><br><span class="line">#</span><br><span class="line">#   # The amount of time from a node is authenticated with OpenID until it</span><br><span class="line">#   # expires and needs to reauthenticate.</span><br><span class="line">#   # Setting the value to &quot;0&quot; will mean no expiry.</span><br><span class="line">#   expiry: 180d</span><br><span class="line">#</span><br><span class="line">#   # Use the expiry from the token received from OpenID when the user logged</span><br><span class="line">#   # in, this will typically lead to frequent need to reauthenticate and should</span><br><span class="line">#   # only been enabled if you know what you are doing.</span><br><span class="line">#   # Note: enabling this will cause &#96;oidc.expiry&#96; to be ignored.</span><br><span class="line">#   use_expiry_from_token: false</span><br><span class="line">#</span><br><span class="line">#   # Customize the scopes used in the OIDC flow, defaults to &quot;openid&quot;, &quot;profile&quot; and &quot;email&quot; and add custom query</span><br><span class="line">#   # parameters to the Authorize Endpoint request. Scopes default to &quot;openid&quot;, &quot;profile&quot; and &quot;email&quot;.</span><br><span class="line">#</span><br><span class="line">#   scope: [&quot;openid&quot;, &quot;profile&quot;, &quot;email&quot;, &quot;custom&quot;]</span><br><span class="line">#   extra_params:</span><br><span class="line">#     domain_hint: example.com</span><br><span class="line">#</span><br><span class="line">#   # List allowed principal domains and&#x2F;or users. If an authenticated user&#39;s domain is not in this list, the</span><br><span class="line">#   # authentication request will be rejected.</span><br><span class="line">#</span><br><span class="line">#   allowed_domains:</span><br><span class="line">#     - example.com</span><br><span class="line">#   # Note: Groups from keycloak have a leading &#39;&#x2F;&#39;</span><br><span class="line">#   allowed_groups:</span><br><span class="line">#     - &#x2F;headscale</span><br><span class="line">#   allowed_users:</span><br><span class="line">#     - alice@example.com</span><br><span class="line">#</span><br><span class="line">#   # If &#96;strip_email_domain&#96; is set to &#96;true&#96;, the domain part of the username email address will be removed.</span><br><span class="line">#   # This will transform &#96;first-name.last-name@example.com&#96; to the user &#96;first-name.last-name&#96;</span><br><span class="line">#   # If &#96;strip_email_domain&#96; is set to &#96;false&#96; the domain part will NOT be removed resulting to the following</span><br><span class="line">#   user: &#96;first-name.last-name.example.com&#96;</span><br><span class="line">#</span><br><span class="line">#   strip_email_domain: true</span><br><span class="line"></span><br><span class="line"># Logtail configuration</span><br><span class="line"># Logtail is Tailscales logging and auditing infrastructure, it allows the control panel</span><br><span class="line"># to instruct tailscale nodes to log their activity to a remote server.</span><br><span class="line">logtail:</span><br><span class="line">  # Enable logtail for this headscales clients.</span><br><span class="line">  # As there is currently no support for overriding the log server in headscale, this is</span><br><span class="line">  # disabled by default. Enabling this will make your clients send logs to Tailscale Inc.</span><br><span class="line">  enabled: false</span><br><span class="line"></span><br><span class="line"># Enabling this option makes devices prefer a random port for WireGuard traffic over the</span><br><span class="line"># default static port 41641. This option is intended as a workaround for some buggy</span><br><span class="line"># firewall devices. See https:&#x2F;&#x2F;tailscale.com&#x2F;kb&#x2F;1181&#x2F;firewalls&#x2F; for more information.</span><br><span class="line">randomize_client_port: true</span><br></pre></td></tr></table></figure><p>拉取docker</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d  --name head  -v /home/docker/headscale/config:/etc/headscale/  -v /home/docker/heads</span><br><span class="line">cale/data:/var/lib/headscale  -p 8080:8080  -p 9090:9090  -p 3478:3478/udp  --restart always  headscale/hea</span><br><span class="line">dscale:0.22.3  headscale serve</span><br></pre></td></tr></table></figure><p>拉取ui</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d  --name ui  --restart always  -v /home/docker/headscale/config:/etc/headscale/:ro  -v</span><br><span class="line"> /home/docker/headscale/web-ui/data:/data  -u root  -p 5000:5000  -e HS_SERVER=http://192.168.2.21:8080  -e</span><br><span class="line"> DOMAIN_NAME=https://eu.org  -e SCRIPT_NAME=/admin  -e AUTH_TYPE=Basic  -e BASIC_AUTH_USER</span><br><span class="line">=admin  -e BASIC_AUTH_PASS=admin  -e KEY=<span class="string">"2uHP6BSVocX+wcWU5mzuXA7JvnZA70UaTadB8L1heOo="</span>  --restart always  </span><br><span class="line">ifargle/headscale-webui:latest</span><br></pre></td></tr></table></figure><p>nginx配置</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       30443 ssl;</span><br><span class="line">    listen  [::]:30443 ssl;</span><br><span class="line">    server_name  eu.org;</span><br><span class="line">    ssl_certificate  /root/.acme.sh/cmsgo.eu.org_ecc/eu.org.cer;</span><br><span class="line">    ssl_certificate_key /root/.acme.sh/cmsgo.eu.org_ecc/eu.org.key;</span><br><span class="line"> </span><br><span class="line">    location ^~/ &#123;</span><br><span class="line">        proxy_pass http://localhost:8080/;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection $connection_upgrade;</span><br><span class="line">        proxy_set_header Host $server_name;</span><br><span class="line">        proxy_redirect https:// https://;</span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    location ^~/admin/ &#123;</span><br><span class="line">        proxy_pass http://localhost:5000/admin/;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">server &#123;</span><br><span class="line">    listen 30080;</span><br><span class="line">    server_name  eu.org;</span><br><span class="line">    rewrite ^(.*)$ https://$host:30443$1 permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>acme自动续签</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl  https://get.acme.sh | sh -s email=example@qq.com</span><br></pre></td></tr></table></figure><p>获取</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.acme.sh/acme.sh --issue --dns dns_cf -d <span class="string">'eu.org'</span> -d <span class="string">'*.eu.org'</span> --reloadcmd  <span class="string">"nginx -s reload"</span></span><br></pre></td></tr></table></figure><p>headscale 常用命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看用户</span></span><br><span class="line">docker <span class="built_in">exec</span> -it head headscale users ls</span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">docker <span class="built_in">exec</span> -it head headscale users create hz</span><br><span class="line"><span class="comment"># 生成apikey</span></span><br><span class="line">docker <span class="built_in">exec</span> -it head headscale apikey create</span><br><span class="line"><span class="comment"># 查询apikey</span></span><br><span class="line">docker <span class="built_in">exec</span> -it head headscale apikey ls</span><br></pre></td></tr></table></figure><p>apikey</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it head headscale apikeys create -e 10000d</span><br></pre></td></tr></table></figure><p>创建用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  创建用户</span></span><br><span class="line">docker <span class="built_in">exec</span> -it headscale headscale users create cms</span><br></pre></td></tr></table></figure><p>授权秘钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># reusable 参数代表可以重复使用，不加的话密钥只能用来一个客户端加入</span></span><br><span class="line">docker <span class="built_in">exec</span> -it headscale headscale preuthkeys create -e 10000d --reusable -u cms</span><br><span class="line"><span class="comment"># 查看密钥 </span></span><br><span class="line">docker <span class="built_in">exec</span> -it headscale headscale preauthkeys list -u cms</span><br></pre></td></tr></table></figure><p>使用样例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tailscale login --login-server https://eu.org  --authkey 76397cb0bb1090104ee33b58568aae2876088e09dd541 --accept-dns=<span class="literal">false</span> --accept-routes</span><br></pre></td></tr></table></figure><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>headscale</tag>
        <tag>tailscale</tag>
      </tags>
  </entry>
  <entry>
    <title>openwrt启用daemon json 文件</title>
    <url>/a38fd9b.html</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@OpenWrt:~<span class="comment"># cat /etc/config/dockerd </span></span><br><span class="line"></span><br><span class="line">config globals <span class="string">'globals'</span></span><br><span class="line">	option log_level <span class="string">'warn'</span></span><br><span class="line">	option auto_start <span class="string">'1'</span></span><br><span class="line">        option alt_config_file <span class="string">'/etc/docker/daemon.json'</span>  </span><br><span class="line">	option data_root <span class="string">'/mnt/mmcblk2p4/docker/'</span></span><br><span class="line">	option bip <span class="string">'172.31.0.1/24'</span></span><br><span class="line">	option iptables <span class="string">'true'</span></span><br><span class="line"></span><br><span class="line">config dockerman <span class="string">'dockerman'</span></span><br><span class="line">	option socket_path <span class="string">'/var/run/docker.sock'</span></span><br><span class="line">	option status_path <span class="string">'/tmp/.docker_action_status'</span></span><br><span class="line">	option debug <span class="string">'false'</span></span><br><span class="line">	option debug_path <span class="string">'/tmp/.docker_debug'</span></span><br><span class="line">	option remote_endpoint <span class="string">'0'</span></span><br><span class="line">	list ac_allowed_interface <span class="string">'br-lan'</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>docker 限制容器的日志大小</title>
    <url>/9e5187ce.html</url>
    <content><![CDATA[<p>使用以下命令限制docker的日志大小与日志数量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--<span class="built_in">log</span>-driver=json-file --<span class="built_in">log</span>-opt max-size=1m --<span class="built_in">log</span>-opt max-file=1</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>golang 查询elasticsearch取值</title>
    <url>/4cf6a634.html</url>
    <content><![CDATA[<h4 id="连接es"><a href="#连接es" class="headerlink" title="连接es"></a>连接es</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"context"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"github.com/olivere/elastic"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client *elastic.Client</span><br><span class="line"><span class="keyword">var</span> host = <span class="string">"http://x.x.x.x:29200/"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"开始初始化"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不添加elastic.SetSniff(false)会导致连不上</span></span><br><span class="line">	client, err = elastic.NewClient(elastic.SetSniff(<span class="literal">false</span>), elastic.SetURL(host))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	info, _, err := client.Ping(host).Do(context.Background())</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">"version %s\n"</span>, info.Version.Number)</span><br><span class="line">	fmt.Println(<span class="string">"初始化完成，连接成功"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="使用bool查询"><a href="#使用bool查询" class="headerlink" title="使用bool查询"></a>使用bool查询</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">query</span><span class="params">(department_name, department_id <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">ids := <span class="string">"1.1007588.1327."</span> + department_id</span><br><span class="line"></span><br><span class="line"><span class="comment">// boolQuery</span></span><br><span class="line">boolQuery := elastic.NewBoolQuery()</span><br><span class="line">boolQuery.Must(elastic.NewPrefixQuery(<span class="string">"SZDXFJG.XFJGNBBM"</span>, ids))</span><br><span class="line">searchResult, err := client.Search().Index(<span class="string">"a_kec_pbjl"</span>).Query(boolQuery).Do(context.Background())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"查询失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(department_name, searchResult.Hits.TotalHits)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>golang</tag>
        <tag>elasticsearch</tag>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>linux查看文件前几行和后几行</title>
    <url>/a2ace30a.html</url>
    <content><![CDATA[<p>查看文件前5行</p><p><code>head -n 5 /tmp/tmpfile</code></p><p>查看文件后5行</p><p><code>tail -n 5 /tmp/tmpfile</code></p><p>从100行开始，显示200行，即显示100-299行</p><p><code>cat filename | tail -n +100 | head -n 200</code></p><p>显示100行到300行</p><p><code>cat filename | head -n 300 | tail -n +100</code></p><p>显示最后1000行</p><p><code>tail -n 1000</code></p><a id="more"></a><p>从1000行开始显示，显示1000行以后的</p><p><code>tail -n +1000</code></p><p>显示前面1000行</p><p><code>head -n 1000</code></p>]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>开始使用Qexo在线编辑hexo</title>
    <url>/65334ed1.html</url>
    <content><![CDATA[<h4 id="历程"><a href="#历程" class="headerlink" title="历程"></a>历程</h4><ul><li>以前尝试过使用电脑安装<code>typecho</code>软件配合<code>git</code>，写完上传至<code>github</code>，通过自动化完成博客的渲染构建。后来发现这种方式局限性很大，无法在任何地点都拿起设备开始写作。</li><li>接下来找到了<code>hexo-admin</code>插件。该插件基本满足了我的需求，通过自建<code>docker</code>，内置<code>hexo</code>博客的所有依赖。也不知道是不是N1的性能不行，往往文章写了大大的一篇，发布后只能看到两三行文字，十分苦恼。</li></ul><a id="more"></a><ul><li>那一段时间，几乎只写一点点就<code>push</code>了，担心数据没保存。</li><li>偶然发现了<code>Qexo</code>，免费<code>vercel</code>搭配免费的<code>MongoDB</code>部署瞬间吸引了我。因为之前有通过<code>vercel</code>搭建<code>twikoo</code>评论系统的经验，数据库也是现成的，直接拿来用</li></ul><h4 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h4><ul><li>首先在作者的<code>wiki</code>上，点击<a href="https://github.com/Qexo/Qexo/wiki/Vercel-%E9%83%A8%E7%BD%B2" target="_blank" rel="noopener external nofollow noreferrer">一键部署</a>，部署失败没关系，因为还没连接数据库</li><li>接着找到之前部署<code>twikoo</code> 的环境变量复制出来，把该填的信息都填到<code>Qexo</code>的环境变量中</li><li>再次点击重新部署就OK了</li><li>点击visit即可访问</li></ul><h4 id="ALL"><a href="#ALL" class="headerlink" title="ALL"></a>ALL</h4><ul><li>先发布看看，正不正常先</li></ul>]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>qexo</tag>
      </tags>
  </entry>
  <entry>
    <title>N1刷OpenWrt后docker使用桥接模式,防火墙外部无法访问的解决方法</title>
    <url>/7651c1c1.html</url>
    <content><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><ul><li>N1刷OpenWrt后docker使用桥接模式,在N1系统内可以访问，但在防火墙外无法访问bridge映射的端口</li></ul><h4 id="参考解决方法"><a href="#参考解决方法" class="headerlink" title="参考解决方法"></a>参考解决方法</h4><ul><li>在防火墙自定义规则中添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 172.31.0.1&#x2F;24 ! -o docker0 -j MASQUERADE</span><br></pre></td></tr></table></figure>其中<code>172.31.0.1/24</code>可以根据自己容器的网络段做配置</li></ul>]]></content>
      <tags>
        <tag>docker</tag>
        <tag>openwrt</tag>
        <tag>N1</tag>
      </tags>
  </entry>
  <entry>
    <title>GB28181 排查小结</title>
    <url>/5e6f5e20.html</url>
    <content><![CDATA[<h4 id="国标28181注册信令"><a href="#国标28181注册信令" class="headerlink" title="国标28181注册信令"></a>国标28181注册信令</h4><h5 id="海康下级返回400bad信令过程"><a href="#海康下级返回400bad信令过程" class="headerlink" title="海康下级返回400bad信令过程"></a>海康下级返回400bad信令过程</h5><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/image.lipf3082io.png" alt=""><br>如上图所示，我方invite，发起视频浏览请求后，海康先回复100try（可以忽略），紧接着回复了400 Bad。我方无法解决，需要联系下级再次抓包一起解决</p><h5 id="海康下级正常返回信令过程（重要）"><a href="#海康下级正常返回信令过程（重要）" class="headerlink" title="海康下级正常返回信令过程（重要）"></a>海康下级正常返回信令过程（重要）</h5><ul><li><p>如图：<br><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/image.w1kp81osd5e.png" alt=""></p><a id="more"></a></li><li><p>首先由上级发起invite请求，里面携带了上级的浏览地址<code>20.80.128.104</code>和端口<code>47942</code><br><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/image.t0bg5ntq8yr.png" alt=""></p></li><li><p>然后下级正常返回100try,同样可以忽略。</p></li><li><p>接着下级在200ok中返回其打开的流地址<code>20.80.128.105</code>和端口<code>41088</code>，如图：<br><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/image.0etomufirk8u.png" alt=""></p></li><li><p>最后上级进行ack，播放结束后，上级需要发送bye，下级再回复200ok，即可关闭通道。完整的流程结束。</p></li></ul>]]></content>
  </entry>
  <entry>
    <title>Golang与Docker实现联通809订阅快速部署</title>
    <url>/41ba9f28.html</url>
    <content><![CDATA[<blockquote><p>Docker <a href="https://hub.docker.com/repository/docker/740162752/unicom809" target="_blank" rel="noopener external nofollow noreferrer">740162752/unicom809</a> Golang开源</p></blockquote><h5 id="仅供学习Go语言交流使用，请勿用于商业用途。"><a href="#仅供学习Go语言交流使用，请勿用于商业用途。" class="headerlink" title="!仅供学习Go语言交流使用，请勿用于商业用途。"></a>!仅供学习Go语言交流使用，请勿用于商业用途。</h5><p>感谢<code>Yuzuki616</code>。在Yuzuki616大佬的基础上加上web监听便于生成订阅链接自动更新；打包成docker便于部署。<a href="https://hub.docker.com/repository/docker/740162752/unicom809" target="_blank" rel="noopener external nofollow noreferrer">Docker:740162752/unicom809</a></p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"crypto/md5"</span></span><br><span class="line">	<span class="string">"encoding/base64"</span></span><br><span class="line">	<span class="string">"encoding/hex"</span></span><br><span class="line">	<span class="string">"encoding/json"</span></span><br><span class="line">	<span class="string">"flag"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"io"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">	<span class="string">"math/rand"</span></span><br><span class="line">	<span class="string">"net"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> listen = flag.String(<span class="string">"l"</span>, <span class="string">":8000"</span>, <span class="string">"订阅的监听端口"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yport = flag.String(<span class="string">"p"</span>, <span class="string">"443"</span>, <span class="string">"原服务的端口"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yhost = flag.String(<span class="string">"h"</span>, <span class="string">""</span>, <span class="string">"原服务的域名或ip，默认空"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yuuid = flag.String(<span class="string">"u"</span>, <span class="string">""</span>, <span class="string">"原服务的uuid，默认空"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> route = flag.String(<span class="string">"r"</span>, <span class="string">"app"</span>, <span class="string">"访问订阅的路由"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFakeID</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	str := <span class="string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span></span><br><span class="line">	strb := []<span class="keyword">byte</span>(str)</span><br><span class="line">	r := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class="line">	<span class="keyword">var</span> result []<span class="keyword">byte</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">22</span>; i++ &#123;</span><br><span class="line">		result = <span class="built_in">append</span>(result, strb[r.Intn(<span class="built_in">len</span>(strb))])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">string</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetBody</span><span class="params">(ip, port <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	path := <span class="string">"if5ax/?fakeid="</span> + getFakeID() + <span class="string">"&amp;spid=81117&amp;pid=81117&amp;spip="</span> + ip + <span class="string">"&amp;spport="</span> + port</span><br><span class="line"></span><br><span class="line">	host := <span class="string">"http://dir.v.wo.cn:809/"</span></span><br><span class="line">	m := md5.Sum([]<span class="keyword">byte</span>(path + <span class="string">"3d99ff138e1f41e931e58617e7d128e2"</span>))</span><br><span class="line">	key := hex.EncodeToString(m[:])</span><br><span class="line">	r, _ := http.Get(host + path + <span class="string">"&amp;spkey="</span> + key)</span><br><span class="line">	body, _ := io.ReadAll(r.Body)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> body</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUrl</span><span class="params">(w http.ResponseWriter, _ *http.Request)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	body := GetBody(*yhost, *yport)</span><br><span class="line"></span><br><span class="line">	rj := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">	json.Unmarshal(body, &amp;rj)</span><br><span class="line"></span><br><span class="line">	pp := strings.Index(rj[<span class="string">"url"</span>], <span class="string">":809"</span>)</span><br><span class="line">	p := strings.Index(rj[<span class="string">"url"</span>], <span class="string">"/if5ax"</span>)</span><br><span class="line">	t := strings.Index(rj[<span class="string">"url"</span>], <span class="string">"lsttm="</span>)</span><br><span class="line">	ip := rj[<span class="string">"url"</span>][<span class="number">7</span>:pp]</span><br><span class="line"></span><br><span class="line">	path := rj[<span class="string">"url"</span>][p:]</span><br><span class="line">	tt := rj[<span class="string">"url"</span>][t+<span class="number">6</span> : t+<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">	vmess := []<span class="keyword">byte</span>(<span class="string">`&#123;"add":"`</span> + ip + <span class="string">`","aid":"0","host":"`</span> + ip + <span class="string">`","id":"`</span> + *yuuid + <span class="string">`","net":"ws","path":"`</span> + path + <span class="string">`","port":"809","ps":"联通809`</span> + tt + <span class="string">`过期","sni":"","tls":"","type":"none","v":"2"&#125;`</span>)</span><br><span class="line">	vmessUrl := []<span class="keyword">byte</span>(<span class="string">"vmess://"</span> + base64.StdEncoding.EncodeToString(vmess))</span><br><span class="line">	final := base64.StdEncoding.EncodeToString(vmessUrl)</span><br><span class="line">	fmt.Fprintf(w, final)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	flag.Parse()</span><br><span class="line">	<span class="keyword">if</span> _, err := net.ResolveTCPAddr(<span class="string">"tcp"</span>, *listen); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"解析监听地址异常，%s"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	http.HandleFunc(<span class="string">"/"</span>+*route, getUrl)</span><br><span class="line"></span><br><span class="line">	log.Println(<span class="string">"订阅地址监听"</span>, *listen+<span class="string">"/"</span>+*route, <span class="string">"中..."</span>)</span><br><span class="line">	err := http.ListenAndServe(*listen, <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">"启动端口发生异常, 请检查端口是否被占用"</span>, err)</span><br><span class="line">		time.Sleep(time.Minute)</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><p><code>docker run --net host 740162752/unicom809 -help</code></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>1、主要学习了简单的http-sever提供服务功能</p><p>2、base64加密解密</p><p>3、Golang 的交叉编译并通过docker快速部署项目</p><p>4、flag包的使用</p>]]></content>
      <tags>
        <tag>golang</tag>
        <tag>联通免流</tag>
        <tag>开源</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang Roadmap 首次注册邀请码</title>
    <url>/41b933e3.html</url>
    <content><![CDATA[<h6 id="最新邀请码：Gopher-5989-5535"><a href="#最新邀请码：Gopher-5989-5535" class="headerlink" title="最新邀请码：Gopher-5989-5535"></a>最新邀请码：Gopher-5989-5535</h6>]]></content>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang embed 整合静态文件</title>
    <url>/f863da6b.html</url>
    <content><![CDATA[<p>go 的1.16版本整合了静态文件嵌入整合功能，本文做个记录。为什么要做静态文件整合？无外乎在于部署更简单。</p><h5 id="How？"><a href="#How？" class="headerlink" title="How？"></a>How？</h5><p>想要嵌入静态资源，首先我们得利用embed这个新的标准库。在声明静态资源的文件里我们需要引入这个库。</p><p>对于我们想要嵌入进程序的资源，需要使用//go:embed指令进行声明，注意//之后不能有空格。具体格式如下：</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">//go:embed pattern</span></span><br></pre></td></tr></table></figure><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><p>打包HTML</p><a id="more"></a><h6 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h6><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">|-- favicon.ico</span><br><span class="line">|-- <span class="keyword">go</span>.mod</span><br><span class="line">|-- main.<span class="keyword">go</span></span><br><span class="line">|-- static</span><br><span class="line">|   |-- css</span><br><span class="line">|   |   |-- FiraCode.css</span><br><span class="line">|   |   <span class="string">`-- labulac.css</span></span><br><span class="line"><span class="string">|   `</span>-- img</span><br><span class="line">|       <span class="string">`-- bg.jpg</span></span><br><span class="line"><span class="string">`</span>-- web</span><br><span class="line">    |-- index.html</span><br><span class="line">    <span class="string">`-- writing.go</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4 directories, 8 files</span></span><br></pre></td></tr></table></figure><h6 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h6><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"embed"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">	<span class="string">"webtest/web"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed favicon.ico</span></span><br><span class="line"><span class="keyword">var</span> favcionEmbedfile embed.FS</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed static</span></span><br><span class="line"><span class="keyword">var</span> staticEmbedfiles embed.FS</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	http.HandleFunc(<span class="string">"/"</span>, web.Writing)</span><br><span class="line">	http.Handle(<span class="string">"/static/"</span>, http.FileServer(http.FS(staticEmbedfiles)))</span><br><span class="line">	http.Handle(<span class="string">"/favicon.ico"</span>, http.FileServer(http.FS(favcionEmbedfile)))</span><br><span class="line"></span><br><span class="line">	err := http.ListenAndServe(<span class="string">":8090"</span>, <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">"启动端口发生异常, 请检查端口是否被占用"</span>, err)</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="writing-go"><a href="#writing-go" class="headerlink" title="writing.go"></a>writing.go</h6><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> web</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"embed"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">	<span class="string">"text/template"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed index.html</span></span><br><span class="line"><span class="keyword">var</span> indexEmbedFile embed.FS</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> writingdata <span class="keyword">struct</span> &#123;</span><br><span class="line">	A <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Writing</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	t, err := template.ParseFS(indexEmbedFile, <span class="string">"index.html"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"Error happened.."</span>)</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	t.Execute(w, &amp;writingdata&#123;A: <span class="string">"111"</span>&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>golang</tag>
        <tag>embed</tag>
      </tags>
  </entry>
  <entry>
    <title>win10 总是丢失窗口阴影效果</title>
    <url>/acd9b6b4.html</url>
    <content><![CDATA[<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>安装的火绒安全软件，使用自定义防护规则。</p><p>将“HKEY_CURRENT_USER\Control Panel\Desktop\UserPreferencesMask”的二进制数值加入保护，禁止“修改”权限，触犯规则后“直接阻止”</p><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/image.aoefs6hlb2e.png" alt=""></p>]]></content>
  </entry>
  <entry>
    <title>使用rpm包安装kibana</title>
    <url>/d9e0594c.html</url>
    <content><![CDATA[<blockquote><p><code>Kibana</code>是一个开源的分析与可视化平台，设计出来用于和<code>Elasticsearch</code>一起使用的。你可以用<code>kibana</code>搜索、查看存放在<code>Elasticsearch</code>中的数据。<code>Kibana</code>与<code>Elasticsearch</code>的交互方式是各种不同的图表、表格、地图等，直观的展示数据，从而达到高级的数据分析与可视化的目的。</p></blockquote><h3 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h3><ul><li>操作系统：<code>centos</code> 7.4-1708</li><li><code>elasticsearch</code>：6.8.1</li></ul><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>在线下载rpm包，离线环境安装推荐提前准备好rpm包并上传上去</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/elasticstack/6.x/yum/6.8.1/kibana-6.8.1-x86_64.rpm</span><br></pre></td></tr></table></figure><a id="more"></a><p>安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh kibana-6.8.1-x86_64.rpm</span><br></pre></td></tr></table></figure><p>设置开机自启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> kibana</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start kibana</span><br></pre></td></tr></table></figure><h3 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h3><h4 id="通过配置文件配置-Kibana"><a href="#通过配置文件配置-Kibana" class="headerlink" title="通过配置文件配置 Kibana"></a>通过配置文件配置 Kibana</h4><p><code>/etc/kibana/kibana.yml</code> 目录下编辑<code>kibana</code>配置文件，配置里面的<code>es</code>地址 以及<code>kibana service</code>的名字</p><h4 id="默认端口：5601"><a href="#默认端口：5601" class="headerlink" title="默认端口：5601"></a>默认端口：5601</h4>]]></content>
      <tags>
        <tag>elasticsearch</tag>
        <tag>kibana</tag>
        <tag>rpm</tag>
      </tags>
  </entry>
  <entry>
    <title>使用pjax的NexT 7.X移植Twikoo评论系统</title>
    <url>/4d02c277.html</url>
    <content><![CDATA[<h3 id="1-Twikoo是什么？"><a href="#1-Twikoo是什么？" class="headerlink" title="1. Twikoo是什么？"></a>1. Twikoo是什么？</h3><p><code>twikoo</code>是一个简洁、安全、免费的静态网站评论系统，基于腾讯云开发。<br><code>A simple, safe, free comment system based on Tencent CloudBase (tcb).</code></p><p>地址：<a href="https://twikoo.js.org/" target="_blank" rel="noopener external nofollow noreferrer">Twikoo中文文档</a></p><h3 id="2-咋想起来用换评论系统了"><a href="#2-咋想起来用换评论系统了" class="headerlink" title="2. 咋想起来用换评论系统了"></a>2. 咋想起来用换评论系统了</h3><p>之前一直用的<code>gitalk</code>，虽说不上多厉害但不痛不痒，偶然逛别人博客发现了<code>twikoo</code>，很好看，用起来也方便，当翻看文档时傻了眼：</p><p><strong>暂不支持 <code>NexT 8</code> 以下的版本</strong>，请先升级到 <code>NexT 8</code>。然后在 <code>Hexo</code> 项目根目录执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For NexT version &gt;= 8.0.0 &amp;&amp; &lt; 8.4.0</span></span><br><span class="line">npm install hexo-next-twikoo@1.0.0</span><br><span class="line"><span class="comment"># For NexT version &gt;= 8.4.0</span></span><br><span class="line">npm install hexo-next-twikoo@1.0.1</span><br></pre></td></tr></table></figure><p>一直用的<code>NexT 7.x</code>主题的版本，自己打磨了也很久，打算一直用下去不更新了。突然让上8，有点不适应，所以打算自己移植这个系统。</p><h3 id="3-移植过程"><a href="#3-移植过程" class="headerlink" title="3. 移植过程"></a>3. 移植过程</h3><h4 id="1、研究作者的DEMO"><a href="#1、研究作者的DEMO" class="headerlink" title="1、研究作者的DEMO"></a>1、研究作者的DEMO</h4><p><code>DEMO</code>地址：<a href="https://github.com/imaegoo/twikoo" target="_blank" rel="noopener external nofollow noreferrer">github</a></p><a id="more"></a><h4 id="2、启用twikoo"><a href="#2、启用twikoo" class="headerlink" title="2、启用twikoo"></a>2、启用twikoo</h4><p>在<code>themes\next\_config.yml</code>下新增</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="attr">twikoo:</span> <span class="string">//fastly.jsdelivr.net/npm/twikoo@1.4.11/dist/twikoo.all.min.js</span></span><br></pre></td></tr></table></figure><p>由于都是自己用，索性配置直接写死了，只开了启用开关，看上去是方便调试，其实是懒。。。</p><h4 id="3、增加配置文件"><a href="#3、增加配置文件" class="headerlink" title="3、增加配置文件"></a>3、增加配置文件</h4><p>在<code>themes\next\layout\_third-party\comments\</code>下新增<code>twikoo.swig</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%- set twikoo_uri &#x3D; theme.vendors.twikoo %&#125;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">NexT.utils.loadComments(document.querySelector(&#39;#tcomment&#39;), () &#x3D;&gt; &#123;</span><br><span class="line">  NexT.utils.getScript(&#39;&#123;&#123; twikoo_uri &#125;&#125;&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">     twikoo.init(&#123;</span><br><span class="line">      el         : &#39;#tcomment&#39;,</span><br><span class="line">      envId      : &#39;这里填你的环境信息&#39;,</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;, window.twikoo);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="4、增加js文件"><a href="#4、增加js文件" class="headerlink" title="4、增加js文件"></a>4、增加js文件</h4><p>在<code>themes\next\scripts\filters\comment\</code>下新增<code>twikoo.js</code>,内容如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* global hexo */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; iconText &#125; = <span class="built_in">require</span>(<span class="string">'./common'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add comment</span></span><br><span class="line">hexo.extend.filter.register(<span class="string">'theme_inject'</span>, injects =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> theme = hexo.theme.config;</span><br><span class="line">  <span class="keyword">if</span> (!theme.twikoo.enable) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  injects.comment.raw(<span class="string">'twikoo'</span>, <span class="string">'&lt;div class="twikoo" id="tcomment"&gt;&lt;/div&gt;'</span>, &#123;&#125;, &#123;<span class="attr">cache</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line">  injects.bodyEnd.file(<span class="string">'twikoo'</span>, path.join(hexo.theme_dir, <span class="string">'layout/_third-party/comments/twikoo.swig'</span>));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>至此，不出意外的话，<code>Twikoo</code>就已经移植到<code>NexT 7</code>主题中了</p><h4 id="5、效果图"><a href="#5、效果图" class="headerlink" title="5、效果图"></a>5、效果图</h4><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic/202111122002703.png" alt=""></p><h3 id="4-结尾"><a href="#4-结尾" class="headerlink" title="4. 结尾"></a>4. 结尾</h3><p>启用<code>pjax</code>的网站用此方法不影响使用<code>twikoo</code><br><code>Enjoy!!!</code></p>]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>pjax</tag>
        <tag>twikoo</tag>
        <tag>gitalk</tag>
      </tags>
  </entry>
  <entry>
    <title>docker容器日志查看与清理</title>
    <url>/f8433a0b.html</url>
    <content><![CDATA[<h4 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h4><p>docker容器日志撑爆了磁盘</p><h4 id="2-解决"><a href="#2-解决" class="headerlink" title="2. 解决"></a>2. 解决</h4><h5 id="2-1-设置一个容器服务的日志大小上限"><a href="#2-1-设置一个容器服务的日志大小上限" class="headerlink" title="2.1 设置一个容器服务的日志大小上限"></a>2.1 设置一个容器服务的日志大小上限</h5><p>在<code>/etc/docker/daemon.json</code>下，添加log-dirver和log-opts参数</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"log-driver"</span>:<span class="string">"json-file"</span>,</span><br><span class="line">  <span class="attr">"log-opts"</span>: &#123;<span class="attr">"max-size"</span>:<span class="string">"10m"</span>, <span class="attr">"max-file"</span>:<span class="string">"1"</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>max-size=10m，日志大小上限是10M，<br>max-file=1，有一个日志</p><p>最后重启docker守护进程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>注意!只对新建的容器有效，之前的容器需要重新跑</p><h4 id="3-参考官方文档"><a href="#3-参考官方文档" class="headerlink" title="3. 参考官方文档"></a>3. 参考官方文档</h4><p><a href="https://docs.docker.com/config/containers/logging/configure/" target="_blank" rel="noopener external nofollow noreferrer">https://docs.docker.com/config/containers/logging/configure/</a></p>]]></content>
  </entry>
  <entry>
    <title>使用Vercel部署Typecho博客</title>
    <url>/972d361.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>逛<code>github</code>发现<code>vercel</code>竟然可以部署<code>php</code>项目了，折腾了一天，最终能正常显示<code>typecho</code>默认模板并且可以进入<code>typecho</code>后台写文章，<code>vercel + typecho</code>写博客指日可待啊！只是最终因加载速度太慢而放弃了，<code>hexo yyds</code>！</p><h3 id="尝试步骤"><a href="#尝试步骤" class="headerlink" title="尝试步骤"></a>尝试步骤</h3><h4 id="1-将typecho上传至vercel"><a href="#1-将typecho上传至vercel" class="headerlink" title="1.将typecho上传至vercel"></a>1.将<code>typecho</code>上传至<code>vercel</code></h4><ol><li>从<a href="http://typecho.org/" target="_blank" rel="noopener external nofollow noreferrer">typecho官网</a>下载正式包，建议先本地部署调试完再将<code>build</code>文件夹内的内容上传至<code>github</code></li><li>通过<code>vercel</code>与<code>github</code>相关联并在<code>vercel</code>里导入刚刚创建的<code>github</code>库</li><li><code>vercel</code>自动构建———&gt;访问失败</li></ol><h4 id="2-添加php依赖"><a href="#2-添加php依赖" class="headerlink" title="2.添加php依赖"></a>2.添加<code>php</code>依赖</h4><p>关键点：<code>Vercel-PHP</code>地址：<a href="https://github.com/juicyfx/vercel-php" target="_blank" rel="noopener external nofollow noreferrer">juicyfx/vercel-php</a></p><a id="more"></a><p>截止目前最新的是<code>0.4.0</code>版本，但经过测试发现该版本的<code>php</code>版本对<code>typecho</code>的支持不是很好，建议使用<code>0.3.2</code>版本</p><p>在github库中添加<code>vercel.json</code>文件，内容如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"functions"</span>: &#123;</span><br><span class="line">    <span class="attr">"api/index.php"</span>: &#123;</span><br><span class="line">      <span class="attr">"runtime"</span>: <span class="string">"vercel-php@0.3.2"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"routes"</span>: [</span><br><span class="line">    &#123; <span class="attr">"src"</span>: <span class="string">"/(.*)"</span>, <span class="attr">"dest"</span>: <span class="string">"/api/index.php"</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样再添加<code>api/index.php</code>，内容如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file= <span class="keyword">__DIR__</span> . <span class="string">'/..'</span>.$_SERVER[<span class="string">"PHP_SELF"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(file_exists($file))</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/../index.php'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次提交，发现可以正常访问了</p><h3 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h3><ol><li><code>handsome</code>等大型主题加载不出来，错误是免费版本限制的<code>10s</code>超时了</li><li>部分简洁的双栏主题使用正常</li><li>访问太慢太慢了</li></ol>]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>vercel</tag>
        <tag>typecho</tag>
      </tags>
  </entry>
  <entry>
    <title>开箱即用N1盒子适用的docker版openwrt旁路由</title>
    <url>/19ea9c43.html</url>
    <content><![CDATA[<h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><ol><li><code>N1</code>盒子的系统中已经安装好<code>armbian</code>，并且安装好<code>docker</code></li><li>网络通畅</li></ol><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="1-打开网卡混杂模式"><a href="#1-打开网卡混杂模式" class="headerlink" title="1.打开网卡混杂模式"></a>1.打开网卡混杂模式</h4><p>在<code>/etc/rc.local/</code>中添加</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip link <span class="built_in">set</span> eth0 promisc on</span><br></pre></td></tr></table></figure><h4 id="2-创建docker网络"><a href="#2-创建docker网络" class="headerlink" title="2.创建docker网络"></a>2.创建docker网络</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create -d macvlan --subnet=192.168.68.0/24 --gateway=192.168.68.1 -o parent=eth0 macnet</span><br></pre></td></tr></table></figure><h4 id="3-拉取镜像并启动容器"><a href="#3-拉取镜像并启动容器" class="headerlink" title="3.拉取镜像并启动容器"></a>3.拉取镜像并启动容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --restart always --name openwrt -d --network macnet --privileged 740162752/openwrt:bak /sbin/init</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="4-进入容器并修改参数"><a href="#4-进入容器并修改参数" class="headerlink" title="4.进入容器并修改参数"></a>4.进入容器并修改参数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it openwrt bash</span><br></pre></td></tr></table></figure><p>执行此命令后我们便进入<code>OpenWrt</code>的命令行界面，首先，我们需要编辑<code>OpenWrt</code>的网络配置文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/config/network</span><br></pre></td></tr></table></figure><p>更改<code>lan</code>口设置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config interface <span class="string">'lan'</span></span><br><span class="line">        option <span class="built_in">type</span> <span class="string">'bridge'</span></span><br><span class="line">        option ifname <span class="string">'eth0'</span></span><br><span class="line">        option proto <span class="string">'static'</span></span><br><span class="line">        option ipaddr <span class="string">'192.168.68.10'</span></span><br><span class="line">        option netmask <span class="string">'255.255.255.0'</span></span><br><span class="line">        option ip6assign <span class="string">'60'</span></span><br><span class="line">        option gateway <span class="string">'192.168.68.1'</span></span><br><span class="line">        option broadcast <span class="string">'192.168.68.255'</span></span><br><span class="line">        option dns <span class="string">'192.168.68.1'</span></span><br></pre></td></tr></table></figure><p>最后直接<code>reboot</code>就行</p><h4 id="5-结尾"><a href="#5-结尾" class="headerlink" title="5.结尾"></a>5.结尾</h4><p>在浏览器输入 <code>http://192.168.68.10</code>进入控制面板。</p><p>用户名：<code>root</code></p><p>密码：<code>password</code></p><p><code>Enjoy！！！</code></p><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>docker</tag>
        <tag>openwrt</tag>
        <tag>N1盒子</tag>
      </tags>
  </entry>
  <entry>
    <title>大米执行标准</title>
    <url>/f42d4f4a.html</url>
    <content><![CDATA[<h2 id="大米执行标准-GB"><a href="#大米执行标准-GB" class="headerlink" title="大米执行标准 GB"></a>大米执行标准 GB</h2><p>超市里面大米形形色色，看得眼花缭乱。各种品牌杂乱无章，单单<code>盘锦大米</code>这种品牌就多达6种厂家，<code>五常大米</code>就更多了。</p><p>其他的我看不懂，但我相信国家，只看国标执行标准就行</p><p>盘锦大米 <code>GB/T18824</code><br>五常大米 <code>GB/T19266</code><br>方正大米 <code>GB/T20040</code><br>原阳黄金晴 <code>GB/T22438</code></p><p>普通大米 <code>GB/T1354</code></p><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>大米</tag>
        <tag>盘锦</tag>
        <tag>五常</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl安装图形界面</title>
    <url>/e6a17e8f.html</url>
    <content><![CDATA[<h3 id="wsl如何安装图形界面"><a href="#wsl如何安装图形界面" class="headerlink" title="wsl如何安装图形界面"></a>wsl如何安装图形界面</h3><ol><li>推荐用阿里云镜像源，依赖全的。用清华的源少依赖..</li><li>换好源之后，执行以下命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt updata</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure></li><li>安装<code>xfce4</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install xfce4</span><br></pre></td></tr></table></figure></li><li>安装<code>xrdp</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install xrdp</span><br></pre></td></tr></table></figure><a id="more"></a> 配置<code>xrdp</code> 端口<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sed -i <span class="string">'s/port=3389/port=3390/g'</span> /etc/xrdp/xrdp.ini</span><br></pre></td></tr></table></figure>这里面 <code>3389</code> 是默认配置，这里将其改为 <code>3390</code> 是避免和 <code>windows</code> 的端口冲突。因为两边的端口号是通的<br>配置 <code>xsession</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> xfce4-session &gt;~/.xsession</span><br></pre></td></tr></table></figure>这一步其实是在告诉系统，开启桌面环境的时候开启什么桌面环境。</li><li>启动 <code>xrdp</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service xrdp restart</span><br></pre></td></tr></table></figure></li><li>远程连接</li></ol><p>在 <code>win10</code> 开始菜单中搜远程桌面，或按<code>win+r</code> 后输入<code>mstsc</code><br>在计算机后面输入 <code>localhost:3390</code> 点击连接，用户名这里用<code>root</code></p><ol start="7"><li>如果<code>WSL</code>的<code>Ubuntu</code>系统关闭，如关机重启，会导致远程连接不上，此时需要先在<code>Win10</code>中打开<code>Ubuntu</code>的命令行界面，输入：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service xrdp restart</span><br></pre></td></tr></table></figure>此时再远程连接，即可连接上。</li></ol><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>wsl</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>一条命令一键干掉最新版本宝塔面板的强制登陆限制功能</title>
    <url>/ef396b42.html</url>
    <content><![CDATA[<blockquote><p>宝塔面板竟然强制要求登陆？一条命令解决！</p></blockquote><h4 id="去除"><a href="#去除" class="headerlink" title="去除"></a>去除</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">"s|if (bind_user == 'True') &#123;|if (bind_user == 'REMOVED') &#123;|g"</span> /www/server/panel/BTPanel/static/js/index.js</span><br></pre></td></tr></table></figure><h4 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">"s|if (bind_user == 'REMOVED') &#123;|if (bind_user == 'True') &#123;|g"</span> /www/server/panel/BTPanel/static/js/index.js</span><br></pre></td></tr></table></figure><p>若无效果，记得刷新浏览器缓存</p><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>centOS</tag>
        <tag>euserv</tag>
        <tag>宝塔面板</tag>
      </tags>
  </entry>
  <entry>
    <title>euserv纯ipv6服务器安装宝塔面板</title>
    <url>/4bd15c31.html</url>
    <content><![CDATA[<h3 id="安装宝塔"><a href="#安装宝塔" class="headerlink" title="安装宝塔"></a>安装宝塔</h3><h4 id="1、连接vps后，先执行下面命令："><a href="#1、连接vps后，先执行下面命令：" class="headerlink" title="1、连接vps后，先执行下面命令："></a>1、连接vps后，先执行下面命令：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"nameserver 2001:67c:2b0::4\nnameserver 2001:67c:2b0::6"</span> &gt; /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>该命令是设置你的VPS的DNS解析，让你的VPS可以访问ipv4的网络</p><a id="more"></a><h4 id="2、禁用fastmirror"><a href="#2、禁用fastmirror" class="headerlink" title="2、禁用fastmirror"></a>2、禁用fastmirror</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/yum/pluginconf.d/fastestmirror.conf</span><br><span class="line"><span class="built_in">enable</span>=0  <span class="comment">#将1改为0</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"[main]\nenabled=0\nverbose=0\nalways_print_best_host = true\nsocket_timeout=3\n#  Relative paths are relative to the cachedir (and so works for users as well\n# as root).\nhostfilepath=timedhosts.txt\nmaxhostfileage=10\nmaxthreads=15\n#exclude=.gov, facebook\n#include_only=.nl,.de,.uk,.ie"</span> &gt; /etc/yum/pluginconf.d/fastestmirror.conf</span><br></pre></td></tr></table></figure><h4 id="3、系统升级（可忽略）"><a href="#3、系统升级（可忽略）" class="headerlink" title="3、系统升级（可忽略）"></a>3、系统升级（可忽略）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup yum -y update &amp;</span><br></pre></td></tr></table></figure><h4 id="4、安装宝塔"><a href="#4、安装宝塔" class="headerlink" title="4、安装宝塔"></a>4、安装宝塔</h4><p>安装这个就行了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sSO http://download.bt.cn/install/install_panel.sh &amp;&amp; bash install_panel.sh</span><br></pre></td></tr></table></figure><p>或者这个</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><p>运行bt命令，改下端口8080，取消一下入口限制，然后用cf解析一下，用域名+端口访问即可。</p><p>注意：如果套了cloudflare后访问还是提示错误521的话，那么就输入如下命令：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">echo <span class="string">'::'</span> &gt; <span class="regexp">/www/server</span><span class="regexp">/panel/data</span><span class="regexp">/ipv6.pl &amp;&amp; /etc</span><span class="regexp">/init.d/bt</span> restart</span><br></pre></td></tr></table></figure><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>centOS</tag>
        <tag>euserv</tag>
        <tag>ipv6</tag>
        <tag>宝塔面板</tag>
      </tags>
  </entry>
  <entry>
    <title>flask给html传递标签p时出现转义字符</title>
    <url>/82bbdebe.html</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic/202108222007904.png" alt=""></p><p>传值的时候加上|safe即可顺利解决</p><p>如</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            &#123;&#123; list | safe&#125;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>于 2021年8月16日 labulac<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原本为</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            &#123;&#123; list &#125;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>于 2021年8月16日 labulac<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Homebrew的介绍与安装</title>
    <url>/69a75ead.html</url>
    <content><![CDATA[<h3 id="一、Homebrew是什么东西？"><a href="#一、Homebrew是什么东西？" class="headerlink" title="一、Homebrew是什么东西？"></a>一、Homebrew是什么东西？</h3><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/uPic/D2QeEi.png" alt=""></p><p>Homebrew是一个基于Ruby的Mac OS平台下的软件包管理工具，拥有软件包的安装、卸载、更新、查看、搜索等很多实用功能。简单的一条指令，就可以实现包管理，<strong>而不用你关心各种依赖和文件路径的情况</strong>，十分方便快捷。</p><p>例如你想开发Python，没必要去去Python官网下载软件包，而是直接在终端执行一条指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install python3</span><br></pre></td></tr></table></figure><p>然后就可以拿起啤酒🍺等待安装完成就行，并不需要繁杂的软连接设置。</p><p>酷不酷！</p><a id="more"></a><h3 id="二、Homebrew安装"><a href="#二、Homebrew安装" class="headerlink" title="二、Homebrew安装"></a>二、Homebrew安装</h3><p>同样很简单，一条指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><p>将以上命令粘贴至终端即可。</p><p><strong>(国内安装脚本）：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">"<span class="variable">$(curl -fsSL https://qd.labulac.top/Homebrew.sh)</span>"</span></span><br></pre></td></tr></table></figure><p>更详细的安装指令，详见官网：<a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener external nofollow noreferrer">https://brew.sh/index_zh-cn</a></p><h3 id="三、Homebrew基本使用"><a href="#三、Homebrew基本使用" class="headerlink" title="三、Homebrew基本使用"></a>三、Homebrew基本使用</h3><p>安装任意包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install &lt;packageName&gt;</span><br></pre></td></tr></table></figure><p>示例：安装wget</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install wget</span><br></pre></td></tr></table></figure><p>卸载任意包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew uninstall &lt;packageName&gt;</span><br></pre></td></tr></table></figure><p>示例：卸载git</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew uninstall git</span><br></pre></td></tr></table></figure><p>查询可用包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew search &lt;packageName&gt;</span><br></pre></td></tr></table></figure><p>查看已安装包列表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew list</span><br></pre></td></tr></table></figure><p>查看任意包信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew info &lt;packageName&gt;</span><br></pre></td></tr></table></figure><p>更新Homebrew</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><p>检查Homebrew是否损坏</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew doctor</span><br></pre></td></tr></table></figure><p>查看Homebrew版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew -v</span><br></pre></td></tr></table></figure><p>Homebrew帮助信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew -h</span><br></pre></td></tr></table></figure><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>macOS</tag>
        <tag>brew</tag>
      </tags>
  </entry>
  <entry>
    <title>pyinstaller 打包文件夹</title>
    <url>/36df5201.html</url>
    <content><![CDATA[<h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>先执行 <code>pyinstaller -F -w xxx.py</code><br>再在生成的<code>.spec</code>文件中<code>datas</code>字段添加文件夹数据，需要打包进去的文件都应放在文件夹中</p><p>例子，比如要打包<code>resource</code>文件夹下的内容，则应该写成</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">datas=[('resources','resources')],</span><br></pre></td></tr></table></figure><p>最后，再执行一下<code>pyinstaller xxx.spec</code></p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p><code>pyinstaller -F -w xxx.py --add-data resources;resources</code></p><p>每次都执行以上的命令</p><h4 id="引用打包的文件"><a href="#引用打包的文件" class="headerlink" title="引用打包的文件"></a>引用打包的文件</h4><p>打包的文件路径很关键，利用此函数进行资源定位，直接搬用即可：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_resource_path</span><span class="params">(relative_path)</span>:</span>  <span class="comment"># 利用此函数实现资源路径的定位</span></span><br><span class="line">    <span class="keyword">if</span> getattr(sys, <span class="string">"frozen"</span>, <span class="literal">False</span>):</span><br><span class="line">        base_path = sys._MEIPASS  <span class="comment"># 获取临时资源</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        base_path = os.path.abspath(<span class="string">"."</span>)  <span class="comment"># 获取当前路径</span></span><br><span class="line">    <span class="keyword">return</span> os.path.join(base_path, relative_path)  <span class="comment"># 绝对路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CONF = get_resource_path(os.path.join(<span class="string">"resources"</span>, <span class="string">"labulac.conf"</span>))</span><br></pre></td></tr></table></figure><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>pyinstaller</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3匹配正则用法记录</title>
    <url>/cace3cc2.html</url>
    <content><![CDATA[<h2 id="记录python匹配正则表达式"><a href="#记录python匹配正则表达式" class="headerlink" title="记录python匹配正则表达式"></a>记录python匹配正则表达式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">char = <span class="string">'原文本'</span></span><br><span class="line">pattern = re.findall(<span class="string">'正则表达式'</span>, char)</span><br><span class="line"><span class="keyword">return</span> parrten</span><br></pre></td></tr></table></figure><p>值得注意的是返回的<code>pattern</code>是数组，需要注意相关取值。</p>]]></content>
      <tags>
        <tag>正则表达式</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python便捷生成requirements.txt</title>
    <url>/f60450bf.html</url>
    <content><![CDATA[<p>使用 <code>pipreqs</code> ，github地址为： <code>https://github.com/bndr/pipreqs</code></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install pipreqs</span><br></pre></td></tr></table></figure><h2 id="在当前目录生成"><a href="#在当前目录生成" class="headerlink" title="在当前目录生成"></a>在当前目录生成</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pipreqs . --encoding=utf8 --force</span><br></pre></td></tr></table></figure><p>注意 <code>--encoding=utf8</code> 为使用<code>utf8</code>编码，不然可能会报<code>UnicodeDecodeError: &#39;gbk&#39; codec can&#39;t decode byte 0xae in position 406: illegal multibyte sequence</code> 的错误。</p><p><code>--force</code> 强制执行，当 生成目录下的<code>requirements.txt</code>存在时覆盖。</p>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>requirements</tag>
      </tags>
  </entry>
  <entry>
    <title>私有云盘cloudever v3 go重置版搭建</title>
    <url>/802e51e1.html</url>
    <content><![CDATA[<blockquote><p>德国免费的小鸡，虽然配置差了点，但是那免费的“无限”流量着实有点羡慕，闲着也是闲着，不如拿来做个网盘，配置个aria2做下载站</p></blockquote><h3 id="cloudreve-v3-go重置版特性"><a href="#cloudreve-v3-go重置版特性" class="headerlink" title="cloudreve v3 go重置版特性"></a>cloudreve v3 go重置版特性</h3><ul><li><p>☁️ 支持本机、从机、七牛、阿里云 OSS、腾讯云 COS、又拍云、OneDrive (包括世纪互联版) 作为存储端</p></li><li><p>📤 上传/下载 支持客户端直传，支持下载限速</p></li><li><p>💾 可对接 Aria2 离线下载</p><a id="more"></a></li><li><p>📚 在线 压缩/解压缩、多文件打包下载</p></li><li><p>💻 覆盖全部存储策略的 WebDAV 协议支持</p></li><li><p>⚡ 拖拽上传、目录上传、流式上传处理</p></li><li><p>🗃️ 文件拖拽管理</p></li><li><p>👩‍👧‍👦 多用户、用户组</p></li><li><p>🔗 创建文件、目录的分享链接，可设定自动过期</p></li><li><p>👁️‍🗨️ 视频、图像、音频、文本、Office 文档在线预览</p></li><li><p>🎨 自定义配色、黑暗模式、PWA 应用、全站单页应用</p></li><li><p>🚀 All-In-One 打包，开箱即用</p></li><li><p>🌈 … …</p></li></ul><h3 id="官方支持的网站和文档"><a href="#官方支持的网站和文档" class="headerlink" title="官方支持的网站和文档"></a>官方支持的网站和文档</h3><ul><li>官网：<a href="https://cloudreve.org/" target="_blank" rel="noopener external nofollow noreferrer">https://cloudreve.org/</a></li><li>github：<a href="https://github.com/cloudreve/Cloudreve" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/cloudreve/Cloudreve</a></li><li>下载：<a href="https://github.com/cloudreve/Cloudreve/releases" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/cloudreve/Cloudreve/releases</a></li><li>安装文档：<a href="https://docs.cloudreve.org/getting-started/install" target="_blank" rel="noopener external nofollow noreferrer">https://docs.cloudreve.org/getting-started/install</a></li><li>演示：<a href="https://demo.cloudreve.org/" target="_blank" rel="noopener external nofollow noreferrer">https://demo.cloudreve.org</a></li></ul><h3 id="宝塔面板部署"><a href="#宝塔面板部署" class="headerlink" title="宝塔面板部署"></a>宝塔面板部署</h3><h4 id="1-面板安全放行5212端口"><a href="#1-面板安全放行5212端口" class="headerlink" title="1.面板安全放行5212端口"></a>1.面板安全放行5212端口</h4><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic/picgo/20201012221400.png" alt="image-20201012221400577"></p><h4 id="2-打开ssh，依次执行下面的语句"><a href="#2-打开ssh，依次执行下面的语句" class="headerlink" title="2.打开ssh，依次执行下面的语句"></a>2.打开ssh，依次执行下面的语句</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /www/wwwroot/cloudreve</span><br><span class="line"><span class="built_in">cd</span> /www/wwwroot/cloudreve</span><br><span class="line">wget https://github.com/cloudreve/Cloudreve/releases/download/3.0.0/cloudreve_3.1.1_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf cloudreve_3.1.1_linux_amd64.tar.gz</span><br><span class="line">chmod +x ./cloudreve</span><br></pre></td></tr></table></figure><h4 id="3-配置永久守护程序"><a href="#3-配置永久守护程序" class="headerlink" title="3.配置永久守护程序"></a>3.配置永久守护程序</h4><p>宝塔面板的软件商店下载堡塔应用管理器并点击设置打开</p><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic/picgo/20201012222058.png" alt="image-20201012222058185"></p><p>配置如下参数</p><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic/picgo/20201012223746.png" alt="image-20201012223515140"></p><p>点击启动，查看默认的用户名与密码</p><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic/picgo/20201012223442.png" alt="image-20201012223442595"></p><h4 id="4-配置反向代理，使用域名访问"><a href="#4-配置反向代理，使用域名访问" class="headerlink" title="4.配置反向代理，使用域名访问"></a>4.配置反向代理，使用域名访问</h4><p>新建一个网站，配置反向代理如下：</p><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic/picgo/20201012223739.png" alt="image-20201012223739898"></p><p>开启ssl，使用https访问：</p><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic/picgo/20201012224022.png" alt="image-20201012224022734"></p><h4 id="5-个人配置文件分享，使用了mysql与redis"><a href="#5-个人配置文件分享，使用了mysql与redis" class="headerlink" title="5.个人配置文件分享，使用了mysql与redis"></a>5.个人配置文件分享，使用了mysql与redis</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[System]</span></span><br><span class="line"><span class="attr">Mode</span> = master</span><br><span class="line"><span class="attr">Listen</span> = :<span class="number">5212</span></span><br><span class="line"><span class="attr">SessionSecret</span> = <span class="number">29</span>vARCK2gS6hE2Poa5tBTke9VXUwGj5Nk2qPm71fEY2dIq3VFN9j</span><br><span class="line"><span class="attr">HashIDSalt</span> = KX0V9dq2TJMy7y3JDHBo16jLbdabTOq6o7usm7jw3kf8YiV</span><br><span class="line"></span><br><span class="line"><span class="section">[Database]</span></span><br><span class="line"><span class="attr">Type</span> = mysql</span><br><span class="line"><span class="attr">User</span> = <span class="number">111</span></span><br><span class="line"><span class="attr">Password</span> = <span class="number">123456</span></span><br><span class="line"><span class="attr">Host</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">Name</span> = <span class="number">1111</span></span><br><span class="line"><span class="attr">TablePrefix</span> = cd</span><br><span class="line"></span><br><span class="line"><span class="section">[Redis]</span></span><br><span class="line"><span class="attr">Server</span> = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span></span><br><span class="line"><span class="attr">Password</span> =</span><br><span class="line"><span class="attr">DB</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>搭建很方便，使用也不错，配合5T的onedrive和aria2离线下载，自动上传，简直香喷喷啊！</p>]]></content>
      <tags>
        <tag>centOS</tag>
        <tag>ssh</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>centOS7 安装 selenium</title>
    <url>/540c906b.html</url>
    <content><![CDATA[<h2 id="centos7安装selenium"><a href="#centos7安装selenium" class="headerlink" title="centos7安装selenium"></a>centos7安装selenium</h2><blockquote><p>环境：centos7，python3，selenium，Chrome内核</p></blockquote><h3 id="1-安装python3"><a href="#1-安装python3" class="headerlink" title="1.安装python3"></a>1.安装python3</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install python3</span><br></pre></td></tr></table></figure><h3 id="2-安装selenium"><a href="#2-安装selenium" class="headerlink" title="2.安装selenium"></a>2.安装selenium</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install selenium</span><br></pre></td></tr></table></figure><h3 id="3-安装chrome浏览器"><a href="#3-安装chrome浏览器" class="headerlink" title="3.安装chrome浏览器"></a>3.安装chrome浏览器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update glib2 -y</span><br><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm --no-check-certificate</span><br><span class="line">yum install -y google-chrome-stable_current_x86_64.rpm</span><br></pre></td></tr></table></figure><h3 id="4-下载chromedriver内核"><a href="#4-下载chromedriver内核" class="headerlink" title="4.下载chromedriver内核"></a>4.下载chromedriver内核</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://chromedriver.storage.googleapis.com/2.43/chromedriver_linux64.zip</span><br></pre></td></tr></table></figure><h3 id="5-解压此文件，并将文件移动到-usr-bin目录下"><a href="#5-解压此文件，并将文件移动到-usr-bin目录下" class="headerlink" title="5.解压此文件，并将文件移动到/usr/bin目录下"></a>5.解压此文件，并将文件移动到/usr/bin目录下</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip chromedriver_linux64.zip</span><br><span class="line">mv chromedriver /usr/bin/</span><br></pre></td></tr></table></figure><h3 id="6-测试selenium是否可用"><a href="#6-测试selenium是否可用" class="headerlink" title="6.测试selenium是否可用"></a>6.测试selenium是否可用</h3><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 回退 iTunes</title>
    <url>/65a5c2d5.html</url>
    <content><![CDATA[<blockquote><p>macOS Mojave 安装 iTunes 12.6.5</p></blockquote><p>首先关闭SIP</p><p>先下载历史版本的iTunes吧：<a href="https://labulac.cowtransfer.com/s/c477c2d967694e" target="_blank" rel="noopener external nofollow noreferrer">iTunes 12.6.5（Mac）</a></p><p>双击下载的镜像以挂载，然后下载一键式App：<a href="https://qd.labulac.top/Mojava%E5%AE%89%E8%A3%85iTunes12.6.x.app.zip" target="_blank" rel="noopener external nofollow noreferrer">App</a></p><a id="more"></a><p>解压下载的<code>zip</code>解压后得到App双击会自动运行，最后会在桌面生成<code>iTunes.pkg</code>,双击安装iTunes即可。</p><p>如果报错：应用程序“iTunes”的这个版本不能与此版本的 macOS 配合使用。您使用的是“iTunes”12.6.5。</p><p>下载这个文件：<a href="https://qd.labulac.top/info.plist%20%26%20version.plist.zip" target="_blank" rel="noopener external nofollow noreferrer">文件</a></p><p>解压后，将「访达」—「应用程序」—「itunes.app」—「显示包内容」中的version.plist和Info.plist两个文件替换就行。</p><p><strong>解决图标斜杠方法</strong></p><p>在iTunes.app上右键，显示简介，先不要关闭简介窗口。然后还在iTunes.app上右键，显示包内容，找到Contents/Resources/iTunes.icns, 把这个文件拖入刚才的简介的窗口的左上角图标处，重新打开iTunes</p><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 修改默认时区为北京时间</title>
    <url>/33685665.html</url>
    <content><![CDATA[<h3 id="先安装"><a href="#先安装" class="headerlink" title="先安装"></a>先安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y ntpdate</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="然后同步时间"><a href="#然后同步时间" class="headerlink" title="然后同步时间"></a>然后同步时间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ntpdate -u cn.pool.ntp.org</span><br></pre></td></tr></table></figure><p>如果执行以上错误出现Denied，或许是你是使用的机器是子机，其母鸡已经同步时间过了。所以直接执行以下步骤即可。</p><h3 id="设置中国时区（北京时间）"><a href="#设置中国时区（北京时间）" class="headerlink" title="设置中国时区（北京时间）"></a>设置中国时区（北京时间）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">timedatectl <span class="built_in">set</span>-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><h3 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>centOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Euserv 纯ipv6 连接 ipv4</title>
    <url>/1f2f3f22.html</url>
    <content><![CDATA[<h3 id="纯ipv6-的Euserv小鸡如何连接-ipv4"><a href="#纯ipv6-的Euserv小鸡如何连接-ipv4" class="headerlink" title="纯ipv6 的Euserv小鸡如何连接 ipv4"></a>纯ipv6 的Euserv小鸡如何连接 ipv4</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"nameserver 2001:67c:2b0::4\nnameserver 2001:67c:2b0::6"</span> &gt; /etc/resolv.conf</span><br><span class="line">curl myip.ipip.net</span><br></pre></td></tr></table></figure><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>centOS</tag>
        <tag>ip</tag>
      </tags>
  </entry>
  <entry>
    <title>centOS 关闭防火墙</title>
    <url>/f96d22ba.html</url>
    <content><![CDATA[<h3 id="如何关闭？"><a href="#如何关闭？" class="headerlink" title="如何关闭？"></a>如何关闭？</h3><p>在ssh中或者cmd中敲入以下命令：</p><a id="more"></a><p>#停止firewall</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p>#禁止firewall开机启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>centOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 获取文件路径与相应的文件名</title>
    <url>/649bef43.html</url>
    <content><![CDATA[<h3 id="最简便的方法"><a href="#最简便的方法" class="headerlink" title="最简便的方法"></a>最简便的方法</h3><p>Python根据路径获取文件的名称，之前了解到的是根据路径用<code>string.split(&#39;\&#39;)</code>，但是处理较麻烦，而且实在不想用split分割，写Python应该是一件快乐的事情。</p><a id="more"></a><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/uPic/i34ZWn.png" alt=""></p><p>其实很简便，在用tkinter选择了相应的文件后，使用OS库的<code>os.path.basename(path)</code>即可</p><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>如何删除.DS_Store文件且不再生</title>
    <url>/7b80571d.html</url>
    <content><![CDATA[<h3 id="1、-DS-Store文件是什么来头"><a href="#1、-DS-Store文件是什么来头" class="headerlink" title="1、.DS_Store文件是什么来头"></a>1、.DS_Store文件是什么来头</h3><p>在 Mac OS系统下，几乎绝大部分文件夹中都包含 .DS_Store 隐藏文件，这里保存着针对这个目录的特殊信息和设置配置，例如查看方式、图标大小以及这个目录的一些附属元数据。</p><a id="more"></a><p>表面上在Mac上看不见这些文件，但是当你打包文件夹然后发给Windows的用户时，就会出现好多的.DS_Store文件，虽然不影响使用，但是很不好看。</p><h3 id="2、删除"><a href="#2、删除" class="headerlink" title="2、删除"></a>2、删除</h3><p>想要删除这些文件，我们只需要打开终端窗口，并输入删除命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo find / -name <span class="string">".DS_Store"</span> -depth -<span class="built_in">exec</span> rm &#123;&#125; \;1</span><br></pre></td></tr></table></figure><p>按下Enter之后，直接输入密码再按回车即可删除</p><h3 id="3、彻底解决"><a href="#3、彻底解决" class="headerlink" title="3、彻底解决"></a>3、彻底解决</h3><p>网传在终端输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.desktopservices DSDontWriteNetworkStores true1</span><br></pre></td></tr></table></figure><p>然后按下回车，就可以防止 .DS_Store 文件的再生了。</p><p>但是在10.14.6版本上体验效果不是很好，直到我找到了这款软件：Asepsisd</p><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/uPic/O7NOAu.png" alt=""></p><p>官网：<a href="https://asepsis.binaryage.com/" target="_blank" rel="noopener external nofollow noreferrer">https://asepsis.binaryage.com/</a></p><p>可惜的是，不再支持macOS更高的版本</p><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/uPic/s50rLm.png" alt=""></p><p>好在该软件已经开源在github：<a href="https://github.com/binaryage/asepsis" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/binaryage/asepsis</a></p><p>经过社区修改让asepsis得以支持macOS 10.13 / 10.14，</p><p>而macOS10.15则没测试⚠️，下面是大家维护的两个分支：</p><ul><li><p><a href="https://github.com/JK3Y/asepsis" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/JK3Y/asepsis</a></p></li><li><p><a href="https://github.com/fnesveda/asepsis" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/fnesveda/asepsis</a></p></li></ul><p>内有详细的安装方法，若有疑问，请留言。</p><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>macOS</tag>
        <tag>访达</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next 主题 APlayer 吸底</title>
    <url>/fa990df5.html</url>
    <content><![CDATA[<h3 id="问题简述"><a href="#问题简述" class="headerlink" title="问题简述"></a>问题简述</h3><p>如何实现在自己博客的左下角加一个音乐播放器，并且可以实现全局播放▶️，无惧跳转干扰？</p><a id="more"></a><p>以前尝试过hexo的插件，但是效果不太理想，参阅别人的博客分享，现综合一下，总结如下：</p><p>首先前往<code>hexo/themes/next/layout</code>，打开这个<code>_layout.swig</code>，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://fastly.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://fastly.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://fastly.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;div class=<span class="string">"aplayer"</span></span><br><span class="line">  data-id=<span class="string">"2127487363"</span></span><br><span class="line">  data-server=<span class="string">"netease"</span></span><br><span class="line">  data-type=<span class="string">"playlist"</span></span><br><span class="line">  data-fixed=<span class="string">"true"</span></span><br><span class="line">  data-theme=<span class="string">"#cc543a"</span></span><br><span class="line">  data-preload=<span class="string">"auto"</span></span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>将其粘贴追加到body体内即可</p><p>然后打开主题的<code>_config.yml</code>，设置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pjax: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>APlayer</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Command &quot;python setup.py egg_info&quot; failed with error code 1 问题</title>
    <url>/dcbcb3a3.html</url>
    <content><![CDATA[<blockquote><p>Command “python setup.py egg_info” failed with error code 1</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install runlike</span><br></pre></td></tr></table></figure><p>时，报错[scode type=”yellow”]ImportError: No module named setuptools[/scode]和[scode type=”yellow”]Command “python setup.py egg_info” failed with error code 1[/scode]</p><p>解决方法是更新 <code>setuptools</code> 和 <code>pip</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --upgrade setuptools</span><br><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic/202108220428683.png" alt=""></p>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>网易云外链生成</title>
    <url>/54d4f843.html</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>想在网页上使用网易云的外链，但有时自己创建的歌单没有生成外链的选项，有时提示因为版权原因无法生成外链。</p><a id="more"></a><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="1-自己创建的歌单没有生成外链选项的解决方法："><a href="#1-自己创建的歌单没有生成外链选项的解决方法：" class="headerlink" title="1.自己创建的歌单没有生成外链选项的解决方法："></a>1.自己创建的歌单没有生成外链选项的解决方法：</h4><p>三步解决：先分享自己的歌单，然后打开自己分享歌单的链接，然后就有生成外链的选项啦！</p><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/uPic/0Jl6bC.png" alt=""></p><h4 id="2-因为版权原因无法生成外链的解决方法："><a href="#2-因为版权原因无法生成外链的解决方法：" class="headerlink" title="2.因为版权原因无法生成外链的解决方法："></a>2.因为版权原因无法生成外链的解决方法：</h4><ol><li><p>打开歌单页面，在“生成外链播放器”上右击，点击审查元素或者检查；</p><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/uPic/HCixRh.png" alt=""></p></li></ol><ol start="2"><li><p>接着找到生成外链播放器这段文字直接双击复制前面的[/outchain/0/435702865/]</p><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/uPic/image-20200321012049148.png" alt=""></p></li></ol><ol start="3"><li><p>然后修改歌单链接示例：</p><p><code>http://music.163.com/#/outchain/0/435702865/</code></p><p>之后打开网页，就能看到外链链接了</p></li></ol><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>网易云音乐</tag>
        <tag>外链</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌云密码连接</title>
    <url>/d66fe673.html</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>新撸的谷歌云通过ssh秘钥连接太麻烦了</p><p>下面改用密码登陆，方便</p><a id="more"></a><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>1.先登入谷歌云打开自带的ssh</p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/uPic/Fld588.png" style="zoom:67%"><p>2.切换到root角色</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><p>3.修改SSH配置文件/etc/ssh/sshd_config</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure><p>修改PermitRootLogin和PasswordAuthentication为yes</p><p>4.给root用户设置密码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure><p>5.重启SSH服务使修改生效</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ssh [user]@[ip]</span><br></pre></td></tr></table></figure><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/uPic/image-20200316131325472.png" alt=""></p><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>ssh</tag>
        <tag>谷歌云</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS 删除灰色的ABC输入法</title>
    <url>/bd92b986.html</url>
    <content><![CDATA[<h3 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h3><p>总是很烦ABC输入法，明明不怎么需要</p><a id="more"></a><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/uPic/d1UslK.png" alt=""></p><p>又是灰色的，如何删除呢？</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>1.首先要关闭系统的完整性保护，即关闭SIP，方法是在重启电脑时按住 command + R 进入恢复模式，然后选择实用工具中的 终端，输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">csrutil <span class="built_in">disable</span></span><br></pre></td></tr></table></figure><p>回车，显示成功关闭SIP，之后重启电脑。</p><p>2.之后打开终端，在命令行输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo open -a /Applications/Xcode.app ~/Library/Preferences/com.apple.HIToolbox.plist</span><br></pre></td></tr></table></figure><p>回车之后输入密码确认，之后便用Xcode打开了这个配置文件。</p><p>另：</p><p>若是使用PlistEdit Pro则输入这个：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo open -a /Applications/PlistEdit\ Pro.app ~/Library/Preferences/com.apple.HIToolbox.plist</span><br></pre></td></tr></table></figure><p>同样输入密码确认，之后便用PlistEdit Pro打开了这个配置文件。</p><p>3.删除红框键值下的子键中带有ABC字样的整个键值</p><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/uPic/WJHZ3v.png" alt=""></p><p>4.删除之后点击保存，如果不能直接保存则可以先将修改的后的文件另存为到桌面上，然后再将文件复制到 <code>~/Library/Preferences</code> 此处，至此已经修改完成。</p><p>5.下面是将系统完整性保护打开：</p><p>重启，进入恢复模式，然后输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">csrutil <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><p>打开系统完整性保护。</p><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>macOS</tag>
        <tag>输入法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python pip3 运行出错：Missing dependencies for SOCK</title>
    <url>/5fa66888.html</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>pip安装报错<code>Could not install packages due to an EnvironmentError: Missing dependencies for SOCK</code></p><a id="more"></a><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/uPic/M9ll3D.png" alt=""></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>终端输入以下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> all_proxy &amp;&amp; <span class="built_in">unset</span> ALL_PROXY</span><br></pre></td></tr></table></figure><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS 允许任何安装来源</title>
    <url>/b3590377.html</url>
    <content><![CDATA[<h3 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h3><p>Mac 升级系统后发现有些非官方渠道的软件，无法安装</p><p>同时发现 <strong>安全性与隐私</strong> 的 <strong>允许从以下位置下载的应用：</strong> 中的<strong>任何来源</strong>选项也不见了…</p><a id="more"></a><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在终端中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure><p>然后在设置里又可以看到<u>允许未知来源</u>又出现了</p><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/uPic/aQdxf1.png" alt=""></p><p>点击那个小黄锁，输入密码，选中。</p><p>然后安装你想要安装的软件 ！</p><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>macOS</tag>
        <tag>设置</tag>
      </tags>
  </entry>
  <entry>
    <title>“您不能使用以点“.”开头的名称，由于系统预留的解决方法</title>
    <url>/f154f512.html</url>
    <content><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>遇到这样的问题：</p><p>提示：“您不能使用以点“.”开头的名称，因为这些名称已被系统预留。请选取其他名称。”</p><a id="more"></a><p><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/uPic/NgQ0yL.png" alt=""></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>文件最前面带上.就会变成隐藏文件，系统默认不显示隐藏文件，所以你必须开启显示隐藏文件才能把文件命名为隐藏文件。</p><p><strong>显示隐藏文件：</strong></p><p>打开『终端』这个程序，输入以下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -boolean <span class="literal">true</span> ; killall Finder</span><br></pre></td></tr></table></figure><p>回车执行。</p><p><strong>隐藏隐藏文件：</strong></p><p>打开『终端』这个程序，输入以下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles FALSE ; killall Finder</span><br></pre></td></tr></table></figure><p>回车执行。</p><p><strong>以上</strong></p>]]></content>
      <tags>
        <tag>macOS</tag>
        <tag>访达</tag>
      </tags>
  </entry>
  <entry>
    <title>原生 Telegram 解锁</title>
    <url>/96bfaef7.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><img data-src="https://fastly.jsdelivr.net/gh/labulac/pic@master/uPic/CRRSNC.png" alt="" style="zoom:33%"><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li><p>原生 TG （版本 ≥ 5.1.3 iOS 商店：<a href="https://apps.apple.com/cn/app/telegram-messenger/id686449807" target="_blank" rel="noopener external nofollow noreferrer">点击下载</a>）</p></li><li><p>Telegram Win Desktop （版本 ≥ 1.9.3 云盘：<a href="https://www.lanzous.com/b0cvwkj4j" target="_blank" rel="noopener external nofollow noreferrer">点击下载</a> 官网：<a href="https://desktop.telegram.org" target="_blank" rel="noopener external nofollow noreferrer">https://desktop.telegram.org</a>）</p></li><li><p>官网Web：<a href="http://web.telegram.org" target="_blank" rel="noopener external nofollow noreferrer">http://web.telegram.org</a></p></li></ul><a id="more"></a><h3 id="解锁（两种方法）"><a href="#解锁（两种方法）" class="headerlink" title="解锁（两种方法）"></a>解锁<strong>（两种方法）</strong></h3><ol><li>Desktop 客户端：<code>Settings→Privacy and Security→Sensutive content→Disable filtering</code></li><li>Web：<code>Settings→Show Sensitive Content</code></li><li>重启手机客户端</li></ol>]]></content>
      <tags>
        <tag>解锁</tag>
        <tag>telegram</tag>
      </tags>
  </entry>
</search>
